AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  My CDK Project Stack converted to SAM template

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: python3.12

Mappings:
  EnvironmentBuckets:
    dev:
      TargetBucket: dev-s3-copy-target-bucket
    prod:
      TargetBucket: prod-s3-copy-target-bucket

Resources:

  S3CopyLambdaSourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "s3-copy-source-bucket-${EnvType}"

  TargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !FindInMap [EnvironmentBuckets, !Ref EnvType, TargetBucket]

  S3CopyLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: s3-copy-lambda-layer
      Description: Python dependencies
      ContentUri: layer/
      CompatibleRuntimes:
        - python3.12

  S3CopyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
 
  # S3CopyLambdaPolicyAttachment:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: "S3CrudPolicy"
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Action:
  #             - "s3:*"
  #           Resource:
  #             - !Sub "arn:aws:s3:::${S3CopyLambdaSourceBucket}"
  #             - !Sub "arn:aws:s3:::${S3CopyLambdaSourceBucket}/*"
  #             - !Sub "arn:aws:s3:::${TargetBucket}"
  #             - !Sub "arn:aws:s3:::${TargetBucket}/*"
  #     Roles:
  #       - !Ref S3CopyLambdaRole

  S3CopyLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: s3copy.handler
      CodeUri: handler/
      Handler: s3copy.handler
      Layers:
        - !Ref S3CopyLambdaLayer
      Environment:
        Variables:
          SOURCE_BUCKET: !Ref S3CopyLambdaSourceBucket
          TARGET_BUCKET: !Ref TargetBucket
      Role: !GetAtt S3CopyLambdaRole.Arn
      FunctionName: !Sub "s3-copy-lambda-${EnvType}"
      Events:
        S3ObjectCreatedEvent:
          Type: S3
          Properties:
            Bucket: !Ref S3CopyLambdaSourceBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .json

  S3CopyLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/s3-copy-lambda-${EnvType}"
      RetentionInDays: 7

  S3ObjectCreatedPermissionForFirstLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt S3CopyLambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt S3CopyLambdaSourceBucket.Arn

Parameters:
  EnvType:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment type
